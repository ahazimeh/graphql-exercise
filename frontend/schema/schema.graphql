type Query {
  user(id: ID): User
  me: User
  projects: [Project!]!
  users(
    # Limits number of fetched items.
    first: Int = 10

    # The offset from which items are returned.
    page: Int
  ): UserPaginator
}

type User {
  id: ID!
  name: String!
  email: String!
  projects: [Project!]!
}

type Project {
  id: ID!
  name: String!
  users: [User!]!
}

# A paginated list of User items.
type UserPaginator {
  # Pagination information about the list of items.
  paginatorInfo: PaginatorInfo!

  # A list of User items.
  data: [User!]!
}

# Information about pagination using a fully featured paginator.
type PaginatorInfo {
  # Number of items in the current page.
  count: Int!

  # Index of the current page.
  currentPage: Int!

  # Index of the first item in the current page.
  firstItem: Int

  # Are there more pages after this one?
  hasMorePages: Boolean!

  # Index of the last item in the current page.
  lastItem: Int

  # Index of the last available page.
  lastPage: Int!

  # Number of items per page.
  perPage: Int!

  # Number of total available items.
  total: Int!
}

type Mutation {
  createProject(input: ProjectInput): Project
  login(input: LoginInput): AuthPayload!
  refreshToken(input: RefreshTokenInput): RefreshTokenPayload!
  logout: LogoutResponse!
  forgotPassword(input: ForgotPasswordInput!): ForgotPasswordResponse!
  updateForgottenPassword(
    input: NewPasswordWithCodeInput
  ): ForgotPasswordResponse!
  register(input: RegisterInput): RegisterResponse!
  socialLogin(input: SocialLoginInput!): AuthPayload!
  verifyEmail(input: VerifyEmailInput!): AuthPayload!
  updatePassword(input: UpdatePassword!): UpdatePasswordResponse!
}

input ProjectInput {
  name: String!
  start_date: Date!
  end_date: Date!
  users: AttachUser
}

# A date string with format `Y-m-d`, e.g. `2011-05-23`.
scalar Date

input AttachUser {
  connect: [ID!]
  sync: [ID!]
}

input LoginInput {
  username: String!
  password: String!
}

type AuthPayload {
  access_token: String
  refresh_token: String
  expires_in: Int
  token_type: String
  user: User
}

input RefreshTokenInput {
  refresh_token: String
}

type RefreshTokenPayload {
  access_token: String!
  refresh_token: String!
  expires_in: Int!
  token_type: String!
}

type LogoutResponse {
  status: String!
  message: String
}

input ForgotPasswordInput {
  email: String!
}

type ForgotPasswordResponse {
  status: String!
  message: String
}

input NewPasswordWithCodeInput {
  email: String!
  token: String!
  password: String!
  password_confirmation: String!
}

input RegisterInput {
  name: String!
  email: String!
  password: String!
  password_confirmation: String!
}

type RegisterResponse {
  tokens: AuthPayload
  status: RegisterStatuses!
}

enum RegisterStatuses {
  MUST_VERIFY_EMAIL
  SUCCESS
}

input SocialLoginInput {
  provider: String!
  token: String!
}

input VerifyEmailInput {
  token: String!
}

input UpdatePassword {
  old_password: String!
  password: String!
  password_confirmation: String!
}

type UpdatePasswordResponse {
  status: String!
  message: String
}

# A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`.
scalar DateTime

# The available directions for ordering a list of records.
enum SortOrder {
  # Sort records in ascending order.
  ASC

  # Sort records in descending order.
  DESC
}

# Allows ordering a list of records.
input OrderByClause {
  # The column that is used for ordering.
  column: String!

  # The direction that is used for ordering.
  order: SortOrder!
}

# Information about pagination using a simple paginator.
type SimplePaginatorInfo {
  # Number of items in the current page.
  count: Int!

  # Index of the current page.
  currentPage: Int!

  # Index of the first item in the current page.
  firstItem: Int

  # Index of the last item in the current page.
  lastItem: Int

  # Number of items per page.
  perPage: Int!
}

# Information about pagination using a Relay style cursor connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # The cursor to continue paginating backwards.
  startCursor: String

  # The cursor to continue paginating forwards.
  endCursor: String

  # Total number of nodes in the paginated connection.
  total: Int!

  # Number of nodes in the current page.
  count: Int!

  # Index of the current page.
  currentPage: Int!

  # Index of the last available page.
  lastPage: Int!
}

# Specify if you want to include or exclude trashed results from a query.
enum Trashed {
  # Only return trashed results.
  ONLY

  # Return both trashed and non-trashed results.
  WITH

  # Only return non-trashed results.
  WITHOUT
}
